const Logger = require('../utils/logger');

class AdminService {
    constructor(bot, userService, adminChatId) {
        this.bot = bot;
        this.userService = userService;
        this.adminChatId = adminChatId;
        this.database = userService.db;
        this.pendingPayments = new Map();
        this.completedPayments = new Map();
        this.waitingForBroadcast = false;
    }

    setupAdminCommands() {
        Logger.info('–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    showAdminMenu(chatId) {
        const message = `üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Philipp

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

        this.bot.sendMessage(chatId, message, {
            reply_markup: {
                keyboard: [
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                    ['üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏'],
                    ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'],
                    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        });
    }

    handleAdminButton(chatId, text) {
        switch (text) {
            case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                this.showStats(chatId);
                break;
            case 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏':
                this.showPendingPayments(chatId);
                break;
            case 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π':
                const userCount = this.userService.getAllUsers().length;
                if (userCount === 0) {
                    this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.');
                } else {
                    this.startBroadcast(chatId);
                }
                break;
            case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                this.showSettings(chatId);
                break;
            default:
                Logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞', { chatId, text });
                break;
        }
    }

    showStats(chatId) {
        const allUsers = this.userService.getAllUsers();
        const stats = {
            totalUsers: allUsers && allUsers.length ? allUsers.length : 0,
            totalPayments: this.pendingPayments.size,
            botUptime: this.getUptime()
        };

        const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üí∞ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.totalPayments}
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.botUptime}`;

        this.bot.sendMessage(chatId, message);
    }

    showPendingPayments(chatId) {
        try {
            const dbPendingPayments = this.database.getPendingPayments();
            const dbCompletedPayments = this.database.getConfirmedPayments();

            let totalPending = dbPendingPayments.length;
            let totalCompleted = dbCompletedPayments.length;

            if (totalPending === 0 && totalCompleted === 0) {
                this.bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π');
                return;
            }

            if (totalPending > 0) {
                let counter = 1;
                for (const payment of dbPendingPayments) {
                    const message = `üí∞ –ü–ª–∞—Ç–µ–∂ ${counter}:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payment.username || '–±–µ–∑ username'}
üìÖ –ü–µ—Ä–∏–æ–¥: ${payment.period}
üí∞ –°—É–º–º–∞: ${payment.amount}‚ÇΩ
‚è∞ –í—Ä–µ–º—è: ${payment.created_at}`;

                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_direct_${payment.user_chat_id}` },
                                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_direct_${payment.user_chat_id}` }
                                ]
                            ]
                        }
                    };

                    if (payment.photo_file_id) {
                        try {
                            this.bot.sendPhoto(chatId, payment.photo_file_id, {
                                caption: message,
                                reply_markup: keyboard.reply_markup
                            });
                        } catch (error) {
                            this.bot.sendMessage(chatId, message + '\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', keyboard);
                        }
                    } else {
                        this.bot.sendMessage(chatId, message + '\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', keyboard);
                    }

                    counter++;
                }
            } else {
                this.bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
            }
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞—Ç–µ–∂–µ–π', { chatId, error: error.message });
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π');
        }
    }

    addPendingPayment(userChatId, paymentInfo) {
        const paymentData = {
            period: paymentInfo.period,
            amount: paymentInfo.amount,
            photoFileId: paymentInfo.photoFileId,
            username: paymentInfo.username,
            first_name: paymentInfo.username || '–±–µ–∑ –∏–º–µ–Ω–∏',
            last_name: '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'
        };

        try {
            this.userService.addUser(userChatId, {
                username: paymentInfo.username,
                first_name: paymentInfo.username || '–±–µ–∑ –∏–º–µ–Ω–∏',
                last_name: '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'
            });

            const paymentId = this.database.addPayment(userChatId, paymentData);
            Logger.info('üí∞ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID:', paymentId);

            const numericKey = Number(userChatId);
            this.pendingPayments.set(numericKey, {
                ...paymentData,
                id: paymentId,
                timestamp: new Date().toLocaleString('ru-RU')
            });

            Logger.paymentEvent('–Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
            this.notifyAdmin(userChatId, paymentData);
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î', { userChatId, error: error.message });
            const numericKey = Number(userChatId);
            this.pendingPayments.set(numericKey, {
                ...paymentData,
                id: Date.now(),
                timestamp: new Date().toLocaleString('ru-RU')
            });
        }
    }

    confirmPayment(userChatId, reason = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º') {
        let paymentInfo = null;
        try {
            const pendingPayments = this.database.getPendingPayments();
            paymentInfo = pendingPayments.find(p => p.user_chat_id == userChatId);
            Logger.info('üîç –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', { userChatId, found: !!paymentInfo });
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î:', error.message);
        }

        if (!paymentInfo) {
            paymentInfo = this.pendingPayments.get(userChatId);
            if (!paymentInfo) {
                const numericKey = Number(userChatId);
                paymentInfo = this.pendingPayments.get(numericKey);
            }
            if (!paymentInfo) {
                const stringKey = userChatId.toString();
                paymentInfo = this.pendingPayments.get(stringKey);
            }
        }

        if (!paymentInfo) {
            Logger.warn('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', { userChatId });
            return false;
        }

        const channelLink = process.env.CHANNEL_ID;
        const message = `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!

–°—Å—ã–ª–∫–∞: ${channelLink}

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üöÄ`;

        this.bot.sendMessage(userChatId, message);

        try {
            const deleted = this.database.deletePaymentByUserId(userChatId);
            Logger.info('–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', { userChatId, deleted });
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î:', error.message);
        }

        this.pendingPayments.delete(userChatId);
        this.pendingPayments.delete(Number(userChatId));
        this.pendingPayments.delete(userChatId.toString());

        const completedPayment = {
            ...paymentInfo,
            status: 'confirmed',
            reason: reason,
            completedAt: new Date().toLocaleString('ru-RU')
        };

        this.completedPayments.set(userChatId, completedPayment);

        Logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ');

        this.bot.sendMessage(this.adminChatId, `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`);

        Logger.paymentEvent('–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
        Logger.adminAction(`–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username}`, this.adminChatId);

        return true;
    }

    rejectPayment(userChatId, reason = '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        let paymentInfo = null;
        try {
            const pendingPayments = this.database.getPendingPayments();
            paymentInfo = pendingPayments.find(p => p.user_chat_id == userChatId);
            Logger.info('üîç –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', { userChatId, found: !!paymentInfo });
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î:', error.message);
        }

        if (!paymentInfo) {
            paymentInfo = this.pendingPayments.get(userChatId);
            if (!paymentInfo) {
                const numericKey = Number(userChatId);
                paymentInfo = this.pendingPayments.get(numericKey);
            }
            if (!paymentInfo) {
                const stringKey = userChatId.toString();
                paymentInfo = this.pendingPayments.get(stringKey);
            }
        }

        if (!paymentInfo) {
            Logger.warn('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', { userChatId });
            return false;
        }

        const message = `‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω

–ü—Ä–∏—á–∏–Ω–∞: ${reason}

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

        this.bot.sendMessage(userChatId, message);

        try {
            const deleted = this.database.deletePaymentByUserId(userChatId);
            Logger.info('–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', { userChatId, deleted });
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î:', error.message);
        }

        this.pendingPayments.delete(userChatId);
        this.pendingPayments.delete(Number(userChatId));
        this.pendingPayments.delete(userChatId.toString());

        const completedPayment = {
            ...paymentInfo,
            status: 'rejected',
            reason: reason,
            completedAt: new Date().toLocaleString('ru-RU')
        };

        this.completedPayments.set(userChatId, completedPayment);

        this.bot.sendMessage(this.adminChatId, `‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω!`);

        Logger.paymentEvent('–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
        Logger.adminAction(`–æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username}`, this.adminChatId);

        return true;
    }

    handleAdminCallback(query) {
        const data = query.data;
        const chatId = query.message.chat.id;

        Logger.info('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π callback:', { data, chatId });

        if (data.startsWith('confirm_direct_')) {
            const userChatId = data.replace('confirm_direct_', '');
            Logger.info('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userChatId);
            const result = this.confirmPayment(userChatId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            Logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', result);
            if (result) {
                this.editMessageToRemoveButtons(query.message, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
            }
        } else if (data.startsWith('reject_direct_')) {
            const userChatId = data.replace('reject_direct_', '');
            Logger.info('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userChatId);
            const result = this.rejectPayment(userChatId, '–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            Logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', result);
            if (result) {
                this.editMessageToRemoveButtons(query.message, '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!');
            }
        } else {
            Logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π callback', { data, chatId });
        }
    }

    startBroadcast(chatId) {
        this.waitingForBroadcast = true;
        this.bot.sendMessage(chatId, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    }

    async sendBroadcast(message, adminChatId) {
        this.waitingForBroadcast = false;

        const allUsers = this.userService.getAllUsers();

        Logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É', {
            totalUsers: allUsers ? allUsers.length : 0,
            users: allUsers ? allUsers : []
        });

        if (!allUsers || allUsers.length === 0) {
            this.bot.sendMessage(adminChatId, '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        this.bot.sendMessage(adminChatId, `üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);

        let successCount = 0;
        let failCount = 0;
        let blockedCount = 0;
        const sentUsers = new Set();

        Logger.info('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
            totalUsers: allUsers.length,
            users: allUsers,
            uniqueUsers: [...new Set(allUsers)]
        });

        const uniqueUsers = [...new Set(allUsers)];
        Logger.info('üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', { uniqueUsers });

        for (const userId of uniqueUsers) {
            const numericAdminChatId = Number(this.adminChatId);
            Logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞', {
                userId,
                adminChatId: this.adminChatId,
                numericAdminChatId,
                isAdmin: userId === numericAdminChatId
            });
            if (userId === numericAdminChatId) {
                Logger.info('üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞', { userId });
                continue;
            }

            Logger.info('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, alreadySent: sentUsers.has(userId) });

            if (sentUsers.has(userId)) {
                Logger.warn('üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç', { userId });
                continue;
            }

            try {
                Logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId });
                await this.bot.sendMessage(userId, message);
                successCount++;
                sentUsers.add(userId);
                Logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { userId, successCount });

                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (error) {
                failCount++;
                Logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', { userId, error: error.message });

                if (error.code === 'ETELEGRAM' && error.message.includes('chat not found')) {
                    blockedCount++;
                    Logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, { userId, error: error.message });
                } else {
                    Logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`, error);
                }
            }
        }

        const summaryMessage = `üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}
‚ùå –û—à–∏–±–∫–∏: ${failCount}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${blockedCount}
üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
${message}`;

        this.bot.sendMessage(adminChatId, summaryMessage);

        Logger.info('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏', {
            allUsers: allUsers || [],
            allUsersType: typeof allUsers,
            allUsersLength: allUsers ? allUsers.length : 0,
            allUsersIsArray: Array.isArray(allUsers),
            successCount,
            failCount,
            blockedCount
        });

        const userCount = allUsers && allUsers.length ? allUsers.length : 0;
        Logger.adminAction(`–æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`, adminChatId);
    }

    editMessageToRemoveButtons(message, newText) {
        try {
            this.bot.editMessageCaption(newText, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });
        } catch (error) {
            Logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', { error: error.message });
        }
    }

    showSettings(chatId) {
        const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üîë ID –∫–∞–Ω–∞–ª–∞: ${process.env.CHANNEL_ID || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üë§ ID –∞–¥–º–∏–Ω–∞: ${this.adminChatId}
üåê –í–µ—Ä—Å–∏—è: 1.0.0`;

        this.bot.sendMessage(chatId, message);
    }

    notifyAdmin(userChatId, paymentInfo) {
        const message = `üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${paymentInfo.username || '–±–µ–∑ username'}
üìÖ –ü–µ—Ä–∏–æ–¥: ${paymentInfo.period}
üí∞ –°—É–º–º–∞: ${paymentInfo.amount}‚ÇΩ
üÜî Chat ID: ${userChatId}
üì∏ –§–æ—Ç–æ: ${paymentInfo.photoFileId ? '‚úÖ' : '‚ùå'}`;

        this.bot.sendMessage(this.adminChatId, message);
    }

    getUptime() {
        const uptime = process.uptime();
        const hours = Math.floor(uptime / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        const seconds = Math.floor(uptime % 60);

        return `${hours}—á ${minutes}–º ${seconds}—Å`;
    }
}

module.exports = AdminService;
