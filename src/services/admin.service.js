const Logger = require('../utils/logger');

class AdminService {
    constructor(bot, userService, adminChatId) {
        this.bot = bot;
        this.userService = userService;
        this.adminChatId = adminChatId;
        this.pendingPayments = new Map();
        this.completedPayments = new Map();
        this.waitingForBroadcast = false;
    }

    setupAdminCommands() {
        Logger.info('–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    showAdminMenu(chatId) {
        const message = `üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Philipp

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

        this.bot.sendMessage(chatId, message, {
            reply_markup: {
                keyboard: [
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                    ['üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏'],
                    ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'],
                    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        });
    }

    handleAdminButton(chatId, text) {
        switch (text) {
            case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                this.showStats(chatId);
                break;
            case 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏':
                this.showPendingPayments(chatId);
                break;
            case 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π':
                const userCount = this.userService.getAllUsers().size;
                if (userCount === 0) {
                    this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.');
                } else {
                    this.startBroadcast(chatId);
                }
                break;
            case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                this.showSettings(chatId);
                break;
            default:
                Logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞', { chatId, text });
                break;
        }
    }

    showStats(chatId) {
        const allUsers = this.userService.getAllUsers();
        const stats = {
            totalUsers: allUsers && allUsers.length ? allUsers.length : 0,
            totalPayments: this.pendingPayments.size,
            botUptime: this.getUptime()
        };

        const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üí∞ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.totalPayments}
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.botUptime}`;

        this.bot.sendMessage(chatId, message);
    }

    showPendingPayments(chatId) {
        let totalPending = this.pendingPayments.size;
        let totalCompleted = this.completedPayments.size;
        
        if (totalPending === 0 && totalCompleted === 0) {
            this.bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π');
            return;
        }

        if (totalPending > 0) {
            this.bot.sendMessage(chatId, `üìã –û–ñ–ò–î–ê–Æ–©–ò–ï –ü–õ–ê–¢–ï–ñ–ò (${totalPending}):`);
            
            let counter = 1;
            for (const [userChatId, paymentInfo] of this.pendingPayments) {
                const message = `üí∞ –ü–ª–∞—Ç–µ–∂ ${counter}:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${paymentInfo.username || '–±–µ–∑ username'}
üìÖ –ü–µ—Ä–∏–æ–¥: ${paymentInfo.period}
üí∞ –°—É–º–º–∞: ${paymentInfo.amount}‚ÇΩ
‚è∞ –í—Ä–µ–º—è: ${paymentInfo.timestamp}`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_direct_${userChatId}` },
                                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_direct_${userChatId}` }
                            ]
                        ]
                    }
                };

                if (paymentInfo.photoFileId) {
                    try {
                        this.bot.sendPhoto(chatId, paymentInfo.photoFileId, {
                            caption: message,
                            reply_markup: keyboard.reply_markup
                        });
                    } catch (error) {
                        this.bot.sendMessage(chatId, message + '\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', keyboard);
                    }
                } else {
                    this.bot.sendMessage(chatId, message + '\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', keyboard);
                }

                counter++;
            }
        }

        if (totalCompleted > 0) {
            this.bot.sendMessage(chatId, `\nüìã –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò (${totalCompleted}):`);
            
            let counter = 1;
            for (const [userChatId, paymentInfo] of this.completedPayments) {
                const statusEmoji = paymentInfo.status === 'confirmed' ? '‚úÖ' : '‚ùå';
                const statusText = paymentInfo.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–û—Ç–∫–ª–æ–Ω–µ–Ω';
                
                const message = `${statusEmoji} –ü–ª–∞—Ç–µ–∂ ${counter}:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${paymentInfo.username || '–±–µ–∑ username'}
üìÖ –ü–µ—Ä–∏–æ–¥: ${paymentInfo.period}
üí∞ –°—É–º–º–∞: ${paymentInfo.amount}‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: ${statusText}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω: ${paymentInfo.completedAt}`;

                this.bot.sendMessage(chatId, message);
                counter++;
            }
        }

        const summaryMessage = `üìä –ò–¢–û–ì–û:
‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: ${totalPending}
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: ${Array.from(this.completedPayments.values()).filter(p => p.status === 'confirmed').length}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: ${Array.from(this.completedPayments.values()).filter(p => p.status === 'rejected').length}`;

        this.bot.sendMessage(chatId, summaryMessage);
    }

    addPendingPayment(userChatId, paymentInfo) {
        const paymentData = {
            period: paymentInfo.period,
            amount: paymentInfo.amount,
            photoFileId: paymentInfo.photoFileId,
            username: paymentInfo.username,
            first_name: paymentInfo.username || '–±–µ–∑ –∏–º–µ–Ω–∏',
            last_name: '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'
        };
        
        const paymentId = Date.now();
        
        const numericKey = Number(userChatId);
        this.pendingPayments.set(numericKey, {
            ...paymentData,
            id: paymentId,
            timestamp: new Date().toLocaleString('ru-RU')
        });

        this.userService.addUser(userChatId, {
            username: paymentInfo.username,
            first_name: paymentInfo.username || '–±–µ–∑ –∏–º–µ–Ω–∏',
            last_name: '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'
        });
        
        Logger.paymentEvent('–Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
        this.notifyAdmin(userChatId, paymentData);
    }

    confirmPayment(userChatId, reason = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º') {
        let paymentInfo = this.pendingPayments.get(userChatId);
        if (!paymentInfo) {
            const numericKey = Number(userChatId);
            paymentInfo = this.pendingPayments.get(numericKey);
        }
        if (!paymentInfo) {
            const stringKey = userChatId.toString();
            paymentInfo = this.pendingPayments.get(stringKey);
        }
        
        if (!paymentInfo) {
            return false;
        }

        const channelLink = `https://t.me/${process.env.CHANNEL_ID?.replace('@', '')}`;
        const message = `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª ${process.env.CHANNEL_ID}!

–°—Å—ã–ª–∫–∞: ${channelLink}

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üöÄ`;

        this.bot.sendMessage(userChatId, message);
        
        this.pendingPayments.delete(userChatId);
        this.pendingPayments.delete(Number(userChatId));
        this.pendingPayments.delete(userChatId.toString());
        
        const completedPayment = {
            ...paymentInfo,
            status: 'confirmed',
            reason: reason,
            completedAt: new Date().toLocaleString('ru-RU')
        };
        
        this.completedPayments.set(userChatId, completedPayment);
        
        this.userService.addUser(userChatId, {
            username: paymentInfo.username,
            first_name: paymentInfo.username || '–±–µ–∑ –∏–º–µ–Ω–∏',
            last_name: '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'
        });
        
        this.bot.sendMessage(this.adminChatId, `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`);

        Logger.paymentEvent('–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
        Logger.adminAction(`–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username}`, this.adminChatId);

        return true;
    }

    rejectPayment(userChatId, reason = '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        let paymentInfo = this.pendingPayments.get(userChatId);
        if (!paymentInfo) {
            const numericKey = Number(userChatId);
            paymentInfo = this.pendingPayments.get(numericKey);
        }
        if (!paymentInfo) {
            const stringKey = userChatId.toString();
            paymentInfo = this.pendingPayments.get(stringKey);
        }
        
        if (!paymentInfo) {
            return false;
        }

        const message = `‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω

–ü—Ä–∏—á–∏–Ω–∞: ${reason}

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

        this.bot.sendMessage(userChatId, message);
        
        this.pendingPayments.delete(userChatId);
        this.pendingPayments.delete(Number(userChatId));
        this.pendingPayments.delete(userChatId.toString());
        
        const completedPayment = {
            ...paymentInfo,
            status: 'rejected',
            reason: reason,
            completedAt: new Date().toLocaleString('ru-RU')
        };
        
        this.completedPayments.set(userChatId, completedPayment);
        
        this.bot.sendMessage(this.adminChatId, `‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω!`);

        Logger.paymentEvent('–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω', userChatId, paymentInfo.amount, paymentInfo.period);
        Logger.adminAction(`–æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentInfo.username}`, this.adminChatId);

        return true;
    }

    handleAdminCallback(query) {
        const data = query.data;
        const chatId = query.message.chat.id;

        if (data.startsWith('confirm_direct_')) {
            const userChatId = data.replace('confirm_direct_', '');
            const result = this.confirmPayment(userChatId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            if (result) {
                this.editMessageToRemoveButtons(query.message, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
            }
        } else if (data.startsWith('reject_direct_')) {
            const userChatId = data.replace('reject_direct_', '');
            const result = this.rejectPayment(userChatId, '–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            if (result) {
                this.editMessageToRemoveButtons(query.message, '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!');
            }
        } else {
            Logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π callback', { data, chatId });
        }
    }



    startBroadcast(chatId) {
        this.waitingForBroadcast = true;
        this.bot.sendMessage(chatId, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    }

    async sendBroadcast(message, adminChatId) {
        this.waitingForBroadcast = false;
        
        const allUsers = this.userService.getAllUsers();
        
        Logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É', { 
            totalUsers: allUsers ? allUsers.length : 0, 
            users: allUsers ? allUsers : [] 
        });
        
        if (!allUsers || allUsers.length === 0) {
            this.bot.sendMessage(adminChatId, '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        this.bot.sendMessage(adminChatId, `üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);

        let successCount = 0;
        let failCount = 0;
        let blockedCount = 0;
        const sentUsers = new Set();

        Logger.info('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', { 
            totalUsers: allUsers.length, 
            users: allUsers,
            uniqueUsers: [...new Set(allUsers)]
        });
        
        const uniqueUsers = [...new Set(allUsers)];
        Logger.info('üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', { uniqueUsers });
        
        for (const userId of uniqueUsers) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞
        const numericAdminChatId = Number(this.adminChatId);
        Logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞', { 
            userId, 
            adminChatId: this.adminChatId,
            numericAdminChatId,
            isAdmin: userId === numericAdminChatId 
        });
        if (userId === numericAdminChatId) {
            Logger.info('üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞', { userId });
            continue;
        }
            
            Logger.info('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, alreadySent: sentUsers.has(userId) });
            
            if (sentUsers.has(userId)) {
                Logger.warn('üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç', { userId });
                continue;
            }

            try {
                Logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId });
                await this.bot.sendMessage(userId, message);
                successCount++;
                sentUsers.add(userId);
                Logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { userId, successCount });
                
                await new Promise(resolve => setTimeout(resolve, 100));
                
            } catch (error) {
                failCount++;
                Logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', { userId, error: error.message });
                
                if (error.code === 'ETELEGRAM' && error.message.includes('chat not found')) {
                    blockedCount++;
                    Logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, { userId, error: error.message });
                } else {
                    Logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`, error);
                }
            }
        }

        const summaryMessage = `üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}
‚ùå –û—à–∏–±–∫–∏: ${failCount}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${blockedCount}
üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
${message}`;

        this.bot.sendMessage(adminChatId, summaryMessage);

        Logger.info('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏', { 
            allUsers: allUsers, 
            allUsersType: typeof allUsers, 
            allUsersLength: allUsers ? allUsers.length : 'undefined',
            allUsersIsArray: Array.isArray(allUsers),
            successCount,
            failCount,
            blockedCount
        });
        
        const userCount = allUsers && allUsers.length ? allUsers.length : 0;
        Logger.adminAction(`–æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`, adminChatId);
    }

    editMessageToRemoveButtons(message, newText) {
        try {
            this.bot.editMessageCaption(newText, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });
        } catch (error) {
            Logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', { error: error.message });
        }
    }

    showSettings(chatId) {
        const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üîë ID –∫–∞–Ω–∞–ª–∞: ${process.env.CHANNEL_ID || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üë§ ID –∞–¥–º–∏–Ω–∞: ${this.adminChatId}
üåê –í–µ—Ä—Å–∏—è: 1.0.0

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.`;

        this.bot.sendMessage(chatId, message);
    }

    notifyAdmin(userChatId, paymentInfo) {
        const message = `üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${paymentInfo.username || '–±–µ–∑ username'}
üìÖ –ü–µ—Ä–∏–æ–¥: ${paymentInfo.period}
üí∞ –°—É–º–º–∞: ${paymentInfo.amount}‚ÇΩ
üÜî Chat ID: ${userChatId}
üì∏ –§–æ—Ç–æ: ${paymentInfo.photoFileId ? '‚úÖ' : '‚ùå'}`;

        this.bot.sendMessage(this.adminChatId, message);
    }

    getUptime() {
        const uptime = process.uptime();
        const hours = Math.floor(uptime / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        const seconds = Math.floor(uptime % 60);
        
        return `${hours}—á ${minutes}–º ${seconds}—Å`;
    }
}

module.exports = AdminService;
