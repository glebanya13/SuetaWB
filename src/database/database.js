const Database = require('better-sqlite3');
const path = require('path');
const Logger = require('../utils/logger');

class DatabaseService {
    constructor() {
        const dbPath = path.join(__dirname, '../../data/suetawb_bot.db');
        
        const fs = require('fs');
        const dbDir = path.dirname(dbPath);
        if (!fs.existsSync(dbDir)) {
            fs.mkdirSync(dbDir, { recursive: true });
        }
        
        this.db = new Database(dbPath);
        this.initDatabase();
        
        const cleanedCount = this.cleanInvalidPhotoFileIds();
        if (cleanedCount > 0) {
            Logger.info(`–û—á–∏—â–µ–Ω–æ ${cleanedCount} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö photo_file_id –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
        }
        
        Logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', { path: dbPath });
    }

    initDatabase() {
        this.db.pragma('foreign_keys = ON');

        this.db.exec(`
            CREATE TABLE IF NOT EXISTS users (
                chat_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        this.db.exec(`
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_chat_id INTEGER NOT NULL,
                period TEXT NOT NULL,
                amount INTEGER NOT NULL,
                photo_file_id TEXT,
                status TEXT DEFAULT 'pending',
                reason TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_chat_id) REFERENCES users(chat_id) ON DELETE CASCADE
            )
        `);

        this.db.exec(`
            CREATE TABLE IF NOT EXISTS user_states (
                chat_id INTEGER PRIMARY KEY,
                state TEXT NOT NULL,
                payment_period TEXT,
                payment_amount INTEGER,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES users(chat_id) ON DELETE CASCADE
            )
        `);

        this.db.exec(`
            CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);
            CREATE INDEX IF NOT EXISTS idx_payments_user ON payments(user_chat_id);
        `);

        Logger.info('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    addUser(chatId, userData = {}) {
        const stmt = this.db.prepare(`
            INSERT OR REPLACE INTO users (chat_id, username, first_name, last_name, updated_at)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        `);
        
        const result = stmt.run(
            chatId,
            userData.username || null,
            userData.first_name || null,
            userData.last_name || null
        );
        
        Logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î', { chatId, result: result.changes });
        
        if (result.changes > 0) {
            Logger.info('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:', {
                chat_id: chatId,
                username: userData.username || '–±–µ–∑ username',
                first_name: userData.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏',
                last_name: userData.last_name || '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏',
                timestamp: new Date().toISOString()
            });
        }
        
        return result.changes > 0;
    }

    getUser(chatId) {
        const stmt = this.db.prepare('SELECT * FROM users WHERE chat_id = ?');
        const user = stmt.get(chatId);
        
        if (user) {
            Logger.debug('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∞:', {
                chat_id: user.chat_id,
                username: user.username || '–±–µ–∑ username',
                first_name: user.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏',
                last_name: user.last_name || '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏',
                is_active: user.is_active,
                created_at: user.created_at,
                updated_at: user.updated_at
            });
        } else {
            Logger.debug('‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', { chat_id: chatId });
        }
        
        return user;
    }

    getAllUsers() {
        const stmt = this.db.prepare(`
            SELECT DISTINCT u.chat_id, u.username, u.first_name, u.last_name, u.created_at, u.updated_at
            FROM users u 
            ORDER BY u.updated_at DESC
        `);
        
        const users = stmt.all();
        const uniqueUsers = new Set(users.map(u => u.chat_id));
        
        Logger.debug('–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ë–î', { 
            rawCount: users.length, 
            uniqueCount: uniqueUsers.size,
            users: Array.from(uniqueUsers)
        });
        
        if (users.length > 0) {
            Logger.info('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', {
                total: users.length,
                users: users.map(u => ({
                    chat_id: u.chat_id,
                    username: u.username || '–±–µ–∑ username',
                    first_name: u.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏',
                    last_name: u.last_name || '–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏',
                    created_at: u.created_at,
                    updated_at: u.updated_at
                }))
            });
        } else {
            Logger.warn('‚ö†Ô∏è –í –ë–î –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        }
        
        return uniqueUsers;
    }

    getUserCount() {
        const stmt = this.db.prepare('SELECT COUNT(*) as count FROM users');
        const count = stmt.get().count;
        
        Logger.debug('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', { 
            totalUsers: count,
            timestamp: new Date().toISOString()
        });
        
        return count;
    }

    addPayment(userChatId, paymentInfo) {
        Logger.info('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –ë–î', { userChatId, paymentInfo });
        
        const stmt = this.db.prepare(`
            INSERT INTO payments (user_chat_id, period, amount, photo_file_id, status)
            VALUES (?, ?, ?, ?, 'pending')
        `);
        
        const result = stmt.run(
            userChatId,
            paymentInfo.period,
            paymentInfo.amount,
            paymentInfo.photoFileId || null
        );
        
        Logger.debug('–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î', { userChatId, paymentId: result.lastInsertRowid });
        
        Logger.info('üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:', {
            payment_id: result.lastInsertRowid,
            user_chat_id: userChatId,
            period: paymentInfo.period,
            amount: paymentInfo.amount,
            photo_file_id: paymentInfo.photoFileId || '–Ω–µ —É–∫–∞–∑–∞–Ω',
            status: 'pending',
            timestamp: new Date().toISOString()
        });
        
        return result.lastInsertRowid;
    }

    getPendingPayments() {
        Logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î');
        
        const stmt = this.db.prepare(`
            SELECT * FROM payments WHERE status = 'pending' ORDER BY created_at ASC
        `);
        
        const payments = stmt.all();
        
        Logger.info('üìã –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑ –ë–î:', {
            total_payments: payments.length,
            payments: payments.map(p => ({
                payment_id: p.id,
                user_chat_id: p.user_chat_id,
                username: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                first_name: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                last_name: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                period: p.period,
                amount: p.amount,
                photo_file_id: p.photo_file_id || '–Ω–µ —É–∫–∞–∑–∞–Ω',
                created_at: p.created_at
            }))
        });
        
        return payments;
    }

    getAllPayments() {
        Logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î');
        
        const stmt = this.db.prepare(`
            SELECT * FROM payments ORDER BY created_at DESC
        `);
        
        const allPayments = stmt.all();
        
        Logger.info('üìã –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –ë–î:', {
            total_payments: allPayments.length,
            payments: allPayments.map(p => ({
                payment_id: p.id,
                user_chat_id: p.user_chat_id,
                period: p.period,
                amount: p.amount,
                photo_file_id: p.photo_file_id || '–Ω–µ —É–∫–∞–∑–∞–Ω',
                status: p.status,
                created_at: p.created_at
            }))
        });
        
        return allPayments;
    }

    updatePaymentStatus(paymentId, status, reason = null) {
        const stmt = this.db.prepare(`
            UPDATE payments 
            SET status = ?, reason = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        `);
        
        const result = stmt.run(status, reason, paymentId);
        Logger.debug('–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', { paymentId, status, changes: result.changes });
        return result.changes > 0;
    }

    deletePayment(paymentId) {
        const stmt = this.db.prepare('DELETE FROM payments WHERE id = ?');
        const result = stmt.run(paymentId);
        Logger.debug('–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î', { paymentId, changes: result.changes });
        return result.changes > 0;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setUserState(chatId, state, paymentInfo = null) {
        const stmt = this.db.prepare(`
            INSERT OR REPLACE INTO user_states (chat_id, state, payment_period, payment_amount, updated_at)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        `);
        
        const result = stmt.run(
            chatId,
            state,
            paymentInfo?.period || null,
            paymentInfo?.amount || null
        );
        
        Logger.debug('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ', { chatId, state, changes: result.changes });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (result.changes > 0) {
            Logger.info('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î:', {
                chat_id: chatId,
                state: state,
                payment_period: paymentInfo?.period || '–Ω–µ —É–∫–∞–∑–∞–Ω',
                payment_amount: paymentInfo?.amount || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                timestamp: new Date().toISOString()
            });
        }
        
        return result.changes > 0;
    }

    getUserState(chatId) {
        const stmt = this.db.prepare('SELECT * FROM user_states WHERE chat_id = ?');
        const userState = stmt.get(chatId);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userState) {
            Logger.debug('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–æ:', {
                chat_id: userState.chat_id,
                state: userState.state,
                payment_period: userState.payment_period || '–Ω–µ —É–∫–∞–∑–∞–Ω',
                payment_amount: userState.payment_amount || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                updated_at: userState.updated_at
            });
        } else {
            Logger.debug('‚ùì –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î:', { chat_id: chatId });
        }
        
        return userState;
    }

    resetUserToMainMenu(chatId) {
        return this.setUserState(chatId, 'main_menu');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        const stats = {};
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userCountStmt = this.db.prepare('SELECT COUNT(*) as count FROM users');
        stats.totalUsers = userCountStmt.get().count;
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
        const allPaymentsStmt = this.db.prepare('SELECT COUNT(*) as count FROM payments');
        stats.totalPayments = allPaymentsStmt.get().count;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const pendingPaymentsStmt = this.db.prepare('SELECT COUNT(*) as count FROM payments WHERE status = ?');
        stats.pendingPayments = pendingPaymentsStmt.get('pending').count;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const confirmedPaymentsStmt = this.db.prepare('SELECT COUNT(*) as count FROM payments WHERE status = ?');
        stats.confirmedPayments = confirmedPaymentsStmt.get('confirmed').count;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const rejectedPaymentsStmt = this.db.prepare('SELECT COUNT(*) as count FROM payments WHERE status = ?');
        stats.rejectedPayments = rejectedPaymentsStmt.get('rejected').count;
        
        // –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const totalAmountStmt = this.db.prepare('SELECT SUM(amount) as total FROM payments');
        stats.totalAmount = totalAmountStmt.get().total || 0;
        
        // –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const confirmedAmountStmt = this.db.prepare('SELECT SUM(amount) as total FROM payments WHERE status = ?');
        stats.confirmedAmount = confirmedAmountStmt.get('confirmed').total || 0;
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        Logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', {
            totalUsers: stats.totalUsers,
            totalPayments: stats.totalPayments,
            pendingPayments: stats.pendingPayments,
            confirmedPayments: stats.confirmedPayments,
            rejectedPayments: stats.rejectedPayments,
            totalAmount: stats.totalAmount,
            confirmedAmount: stats.confirmedAmount
        });
        
        return stats;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    migrateFromMemory(userStates, allUsers, pendingPayments) {
        Logger.info('–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ –≤ –ë–î');
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const chatId of allUsers) {
            this.addUser(chatId);
        }
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for (const [chatId, state] of userStates) {
            this.setUserState(chatId, state);
        }
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for (const [chatId, paymentInfo] of pendingPayments) {
            this.addPayment(chatId, paymentInfo);
        }
        
        Logger.info('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleteUser(chatId) {
        try {
            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            this.db.exec('BEGIN TRANSACTION');
            
            // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
            const deleteStatesStmt = this.db.prepare('DELETE FROM user_states WHERE chat_id = ?');
            const deletePaymentsStmt = this.db.prepare('DELETE FROM payments WHERE user_chat_id = ?');
            const deleteUserStmt = this.db.prepare('DELETE FROM users WHERE chat_id = ?');
            
            // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const statesResult = deleteStatesStmt.run(chatId);
            Logger.debug('–£–¥–∞–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { chatId, deletedStates: statesResult.changes });
            
            // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
            const paymentsResult = deletePaymentsStmt.run(chatId);
            Logger.debug('–£–¥–∞–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { chatId, deletedPayments: paymentsResult.changes });
            
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = deleteUserStmt.run(chatId);
            Logger.debug('–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', { chatId, deletedUser: userResult.changes });
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            this.db.exec('COMMIT');
            
            Logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î', { 
                chatId, 
                deletedStates: statesResult.changes,
                deletedPayments: paymentsResult.changes,
                deletedUser: userResult.changes
            });
            
            return true;
            
        } catch (error) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.db.exec('ROLLBACK');
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { chatId, error: error.message });
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    clearAllData() {
        try {
            Logger.warn('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
            this.db.pragma('foreign_keys = OFF');
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            this.db.exec(`
                DELETE FROM user_states;
                DELETE FROM payments;
                DELETE FROM users;
            `);
            
            // –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
            this.db.pragma('foreign_keys = ON');
            
            Logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞');
            return true;
            
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', error);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö photo_file_id
    cleanInvalidPhotoFileIds() {
        try {
            Logger.warn('–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö photo_file_id');
            
            // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ photo_file_id
            const updateStmt = this.db.prepare(`
                UPDATE payments 
                SET photo_file_id = NULL 
                WHERE photo_file_id = 'test_photo_stats' 
                OR photo_file_id = '' 
                OR photo_file_id IS NULL
                OR photo_file_id NOT LIKE '%_%'
            `);
            
            const result = updateStmt.run();
            
            Logger.info('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ photo_file_id –æ—á–∏—â–µ–Ω—ã', {
                updatedRows: result.changes,
                timestamp: new Date().toISOString()
            });
            
            return result.changes;
            
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö photo_file_id', error);
            return 0;
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    close() {
        if (this.db) {
            this.db.close();
            Logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

module.exports = DatabaseService;
